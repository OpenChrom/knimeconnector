	/**
	 * {@inheritDoc}
	 */
	@Override
	protected BufferedDataTable[] execute(final BufferedDataTable[] inData, final ExecutionContext exec) throws Exception {

		logger.info("Read the chromatographic raw data.");
		/*
		 * Write the chromatogram.
		 */
		if(inData.length > 0) {
			/*
			 * Export *.ocb file.
			 */
			File file = new File(SETTING_CHROMATOGRAM_FILE_OUTPUT.getStringValue());
			IVendorChromatogramMSD chromatogramMSD = new VendorChromatogramMSD();
			//
			BufferedDataTable bufferedDataTable = inData[0];
			DataTableSpec dataTableSpec = bufferedDataTable.getSpec();
			Map<Integer, Double> mzTable = new HashMap<Integer, Double>();
			//
			CloseableRowIterator iterator = bufferedDataTable.iterator();
			int scan = 1;
			int scanCount = getNumberOfRows(bufferedDataTable);
			//
			while(iterator.hasNext()) {
				DataRow dataRow = iterator.next();
				//
				IVendorScanMSD vendorScanMSD = new VendorScanMSD();
				vendorScanMSD.setRetentionTime(Integer.parseInt(dataRow.getCell(0).toString()));
				vendorScanMSD.setRetentionIndex(Float.parseFloat(dataRow.getCell(1).toString()));
				//
				int numberOfCells = dataRow.getNumCells();
				if(numberOfCells == 3) {
					/*
					 * TIC
					 */
					vendorScanMSD.addIon(new VendorIon(DEFAULT_MZ, Float.parseFloat(dataRow.getCell(2).toString())));
				} else {
					/*
					 * XIC
					 */
					for(int i = 2; i < numberOfCells; i++) {
						float abundance = Float.parseFloat(dataRow.getCell(i).toString());
						if(abundance > 0) {
							double mz;
							if(mzTable.containsKey(i)) {
								mz = mzTable.get(i);
							} else {
								mz = Double.parseDouble(dataTableSpec.getColumnSpec(i).getName().toString());
								mzTable.put(i, mz);
							}
							/*
							 * Add the ion.
							 */
							if(mz > 0) {
								vendorScanMSD.addIon(new VendorIon(mz, abundance));
							}
						}
					}
				}
				chromatogramMSD.addScan(vendorScanMSD);
				//
				exec.checkCanceled();
				exec.setProgress(scan / scanCount, "Exporting Scan: " + scan);
				scan++;
			}
			/*
			 * Write the chromatogram.
			 */
			ChromatogramConverterMSD.convert(file, chromatogramMSD, EXPORT_CONVERTER_ID, new NullProgressMonitor());
		}
		return null;
	}